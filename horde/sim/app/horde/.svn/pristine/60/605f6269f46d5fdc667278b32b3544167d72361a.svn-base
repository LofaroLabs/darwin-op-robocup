package sim.app.horde.agent;

import java.awt.*;
import java.awt.geom.*;
import javax.swing.Icon; 

/**
 * This class has been automatically generated using svg2java
 * 
 */
public class RobotIcon implements Icon {
	
	private float origAlpha = 1.0f;

	/**
	 * Paints the transcoded SVG image on the specified graphics context. You
	 * can install a custom transformation on the graphics context to scale the
	 * image.
	 * 
	 * @param g
	 *            Graphics context.
	 */
	public void paint(Graphics2D g) {
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        origAlpha = 1.0f;
        Composite origComposite = g.getComposite();
        if (origComposite instanceof AlphaComposite) {
            AlphaComposite origAlphaComposite = 
                (AlphaComposite)origComposite;
            if (origAlphaComposite.getRule() == AlphaComposite.SRC_OVER) {
                origAlpha = origAlphaComposite.getAlpha();
            }
        }
        
		// _0
		AffineTransform trans_0 = g.getTransform();
		paintRootGraphicsNode_0(g);
		g.setTransform(trans_0);

	}

	private void paintShapeNode_0_0_0_0(Graphics2D g) {
		Rectangle2D.Double shape0 = new Rectangle2D.Double(-15.826927185058594, -6.38024377822876, 1.5152274370193481, 3.7880685329437256);
		g.setPaint(new Color(52, 52, 52, 255));
		g.fill(shape0);
		g.setPaint(new Color(0, 0, 0, 255));
		g.setStroke(new BasicStroke(0.6999993f,0,1,4.0f,null,0.0f));
		g.draw(shape0);
	}

	private void paintShapeNode_0_0_0_1(Graphics2D g) {
		Rectangle2D.Double shape1 = new Rectangle2D.Double(2.00351881980896, 2.138927936553955, 1.5152288675308228, 3.788072109222412);
		g.setPaint(new Color(52, 52, 52, 255));
		g.fill(shape1);
		g.setPaint(new Color(0, 0, 0, 255));
		g.setStroke(new BasicStroke(0.7f,0,1,4.0f,null,0.0f));
		g.draw(shape1);
	}

	private void paintShapeNode_0_0_0_2(Graphics2D g) {
		Rectangle2D.Double shape2 = new Rectangle2D.Double(2.1024036407470703, 2.7201015949249268, 15.745705604553223, 15.99824333190918);
		g.setPaint(new Color(142, 142, 142, 255));
		g.fill(shape2);
		g.setPaint(new Color(0, 0, 0, 255));
		g.setStroke(new BasicStroke(1.0f,0,1,4.0f,null,0.0f));
		g.draw(shape2);
	}

	private void paintShapeNode_0_0_0_3(Graphics2D g) {
		GeneralPath shape3 = new GeneralPath();
		shape3.moveTo(9.785852, 6.647046);
		shape3.curveTo(9.785852, 8.024342, 8.584535, 9.14086, 7.1026344, 9.14086);
		shape3.curveTo(5.620734, 9.14086, 4.419417, 8.024342, 4.419417, 6.647046);
		shape3.curveTo(4.419417, 5.2697506, 5.620734, 4.153232, 7.1026344, 4.153232);
		shape3.curveTo(8.584535, 4.153232, 9.785852, 5.2697506, 9.785852, 6.647046);
		shape3.closePath();
		g.setPaint(new Color(249, 138, 117, 255));
		g.fill(shape3);
		g.setPaint(new Color(0, 0, 0, 255));
		g.setStroke(new BasicStroke(0.6f,0,1,4.0f,null,0.0f));
		g.draw(shape3);
	}

	private void paintShapeNode_0_0_0_4(Graphics2D g) {
		GeneralPath shape4 = new GeneralPath();
		shape4.moveTo(9.785852, 6.647046);
		shape4.curveTo(9.785852, 8.024342, 8.584535, 9.14086, 7.1026344, 9.14086);
		shape4.curveTo(5.620734, 9.14086, 4.419417, 8.024342, 4.419417, 6.647046);
		shape4.curveTo(4.419417, 5.2697506, 5.620734, 4.153232, 7.1026344, 4.153232);
		shape4.curveTo(8.584535, 4.153232, 9.785852, 5.2697506, 9.785852, 6.647046);
		shape4.closePath();
		g.setPaint(new Color(249, 138, 117, 255));
		g.fill(shape4);
		g.setPaint(new Color(0, 0, 0, 255));
		g.draw(shape4);
	}

	private void paintShapeNode_0_0_0_5(Graphics2D g) {
		Rectangle2D.Double shape5 = new Rectangle2D.Double(4.443062782287598, 12.194964408874512, 11.443193435668945, 4.687797546386719);
		g.setPaint(new Color(238, 238, 238, 255));
		g.fill(shape5);
		g.setPaint(new Color(0, 0, 0, 255));
		g.setStroke(new BasicStroke(0.777f,0,1,4.0f,null,0.0f));
		g.draw(shape5);
	}

	private void paintShapeNode_0_0_0_6(Graphics2D g) {
		GeneralPath shape6 = new GeneralPath();
		shape6.moveTo(7.1973367, 6.015701);
		shape6.curveTo(7.1974273, 6.207485, 7.0951633, 6.3847404, 6.929088, 6.4806585);
		shape6.curveTo(6.763013, 6.5765767, 6.5583735, 6.5765767, 6.392298, 6.4806585);
		shape6.curveTo(6.226223, 6.3847404, 6.123959, 6.207485, 6.1240497, 6.015701);
		shape6.curveTo(6.123959, 5.8239164, 6.226223, 5.6466613, 6.392298, 5.550743);
		shape6.curveTo(6.5583735, 5.454825, 6.763013, 5.454825, 6.929088, 5.550743);
		shape6.curveTo(7.0951633, 5.6466613, 7.1974273, 5.8239164, 7.1973367, 6.015701);
		shape6.closePath();
		g.fill(shape6);
		g.setStroke(new BasicStroke(0.6f,0,1,4.0f,null,0.0f));
		g.draw(shape6);
	}

	private void paintShapeNode_0_0_0_7(Graphics2D g) {
		GeneralPath shape7 = new GeneralPath();
		shape7.moveTo(7.1973367, 6.015701);
		shape7.curveTo(7.1974273, 6.207485, 7.0951633, 6.3847404, 6.929088, 6.4806585);
		shape7.curveTo(6.763013, 6.5765767, 6.5583735, 6.5765767, 6.392298, 6.4806585);
		shape7.curveTo(6.226223, 6.3847404, 6.123959, 6.207485, 6.1240497, 6.015701);
		shape7.curveTo(6.123959, 5.8239164, 6.226223, 5.6466613, 6.392298, 5.550743);
		shape7.curveTo(6.5583735, 5.454825, 6.763013, 5.454825, 6.929088, 5.550743);
		shape7.curveTo(7.0951633, 5.6466613, 7.1974273, 5.8239164, 7.1973367, 6.015701);
		shape7.closePath();
		g.fill(shape7);
		g.draw(shape7);
	}

	private void paintShapeNode_0_0_0_8(Graphics2D g) {
		GeneralPath shape8 = new GeneralPath();
		shape8.moveTo(4.4194174, 14.381026);
		shape8.lineTo(15.657364, 14.381026);
		g.setStroke(new BasicStroke(0.777f,0,0,4.0f,null,0.0f));
		g.draw(shape8);
	}

	private void paintShapeNode_0_0_0_9(Graphics2D g) {
		GeneralPath shape9 = new GeneralPath();
		shape9.moveTo(10.985409, 12.171318);
		shape9.lineTo(10.985409, 16.590734);
		g.draw(shape9);
	}

	private void paintShapeNode_0_0_0_10(Graphics2D g) {
		GeneralPath shape10 = new GeneralPath();
		shape10.moveTo(8.712566, 12.171318);
		shape10.lineTo(8.712566, 16.590734);
		g.draw(shape10);
	}

	private void paintShapeNode_0_0_0_11(Graphics2D g) {
		GeneralPath shape11 = new GeneralPath();
		shape11.moveTo(13.258253, 12.171318);
		shape11.lineTo(13.258253, 16.590734);
		g.draw(shape11);
	}

	private void paintShapeNode_0_0_0_12(Graphics2D g) {
		GeneralPath shape12 = new GeneralPath();
		shape12.moveTo(6.502857, 12.171318);
		shape12.lineTo(6.502857, 16.590734);
		g.draw(shape12);
	}

	private void paintCompositeGraphicsNode_0_0_0(Graphics2D g) {
		// _0_0_0_0
		AffineTransform trans_0_0_0_0 = g.getTransform();
		g.transform(new AffineTransform(-0.9023000001907349f, -0.4311079978942871f, -0.4311079978942871f, 0.9023000001907349f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_0(g);
		g.setTransform(trans_0_0_0_0);
		// _0_0_0_1
		AffineTransform trans_0_0_0_1 = g.getTransform();
		g.transform(new AffineTransform(0.9023000001907349f, -0.4311079978942871f, 0.4311079978942871f, 0.9023000001907349f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_1(g);
		g.setTransform(trans_0_0_0_1);
		// _0_0_0_2
		AffineTransform trans_0_0_0_2 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_2(g);
		g.setTransform(trans_0_0_0_2);
		// _0_0_0_3
		AffineTransform trans_0_0_0_3 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, -0.505075991153717f, 0.8207489848136902f));
		paintShapeNode_0_0_0_3(g);
		g.setTransform(trans_0_0_0_3);
		// _0_0_0_4
		AffineTransform trans_0_0_0_4 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 6.439723014831543f, 0.8207489848136902f));
		paintShapeNode_0_0_0_4(g);
		g.setTransform(trans_0_0_0_4);
		// _0_0_0_5
		AffineTransform trans_0_0_0_5 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_5(g);
		g.setTransform(trans_0_0_0_5);
		// _0_0_0_6
		AffineTransform trans_0_0_0_6 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 1.3258249759674072f));
		paintShapeNode_0_0_0_6(g);
		g.setTransform(trans_0_0_0_6);
		// _0_0_0_7
		AffineTransform trans_0_0_0_7 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 7.071067810058594f, 1.3258249759674072f));
		paintShapeNode_0_0_0_7(g);
		g.setTransform(trans_0_0_0_7);
		// _0_0_0_8
		AffineTransform trans_0_0_0_8 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_8(g);
		g.setTransform(trans_0_0_0_8);
		// _0_0_0_9
		AffineTransform trans_0_0_0_9 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_9(g);
		g.setTransform(trans_0_0_0_9);
		// _0_0_0_10
		AffineTransform trans_0_0_0_10 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_10(g);
		g.setTransform(trans_0_0_0_10);
		// _0_0_0_11
		AffineTransform trans_0_0_0_11 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_11(g);
		g.setTransform(trans_0_0_0_11);
		// _0_0_0_12
		AffineTransform trans_0_0_0_12 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintShapeNode_0_0_0_12(g);
		g.setTransform(trans_0_0_0_12);
	}

	private void paintCanvasGraphicsNode_0_0(Graphics2D g) {
		// _0_0_0
		AffineTransform trans_0_0_0 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintCompositeGraphicsNode_0_0_0(g);
		g.setTransform(trans_0_0_0);
	}

	private void paintRootGraphicsNode_0(Graphics2D g) {
		// _0_0
		g.setComposite(AlphaComposite.getInstance(3, 1.0f * origAlpha));
		AffineTransform trans_0_0 = g.getTransform();
		g.transform(new AffineTransform(1.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f));
		paintCanvasGraphicsNode_0_0(g);
		g.setTransform(trans_0_0);
	}



    /**
     * Returns the X of the bounding box of the original SVG image.
     * @return The X of the bounding box of the original SVG image.
     */
    public int getOrigX() {
        return 2;
    }

    /**
     * Returns the Y of the bounding box of the original SVG image.
     * @return The Y of the bounding box of the original SVG image.
     */
    public int getOrigY() {
        return 0;
    }

    /**
     * Returns the width of the bounding box of the original SVG image.
     * @return The width of the bounding box of the original SVG image.
     */
    public int getOrigWidth() {
        return 17;
    }

    /**
     * Returns the height of the bounding box of the original SVG image.
     * @return The height of the bounding box of the original SVG image.
     */
    public int getOrigHeight() {
        return 20;
    }
    
    
	/**
	 * The current width of this resizable icon.
	 */
	int width;

	/**
	 * The current height of this resizable icon.
	 */
	int height;

	/**
	 * Creates a new transcoded SVG image.
	 */
	public RobotIcon() {
        this.width = getOrigWidth();
        this.height = getOrigHeight();
	}

	/*
	 * (non-Javadoc)
	 * @see javax.swing.Icon#getIconHeight()
	 */
    @Override
	public int getIconHeight() {
		return height;
	}

	/*
	 * (non-Javadoc)
	 * @see javax.swing.Icon#getIconWidth()
	 */
    @Override
	public int getIconWidth() {
		return width;
	}

	/*
	 * Set the dimension of the icon.
	 */

	public void setDimension(Dimension newDimension) {
		this.width = newDimension.width;
		this.height = newDimension.height;
	}

	/*
	 * (non-Javadoc)
	 * @see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics, int, int)
	 */
    @Override
	public void paintIcon(Component c, Graphics g, int x, int y) {
		Graphics2D g2d = (Graphics2D) g.create();
		g2d.translate(x, y);

		double coef1 = (double) this.width / (double) getOrigWidth();
		double coef2 = (double) this.height / (double) getOrigHeight();
		double coef = Math.min(coef1, coef2);
		g2d.scale(coef, coef);
		paint(g2d);
		g2d.dispose();
	}
}

