package sim.app.horde.agent;

import java.util.*;

import sim.app.horde.*;
import sim.app.horde.behaviors.*;
import sim.app.horde.transitions.*;

public class ControllerAgent extends Agent implements Controller
    {
    static final long serialVersionUID = 1L;

    ArrayList<AgentGroup> subsidiaryAgents;
    int maxLeafDistance = -1;  // indicates that the distance has not yet been set

    public ArrayList<AgentGroup> getSubsidiaryAgents() { return subsidiaryAgents; }
        
    public Object clone()
        {
        ControllerAgent clone = (ControllerAgent)(super.clone());
        clone.subsidiaryAgents = new ArrayList(subsidiaryAgents);
                
        // deep clone subsidiary agents.  Not sure if we need to do this
        for(int i = 0; i < clone.subsidiaryAgents.size(); i++)
            {
            AgentGroup ag = (AgentGroup)(clone.subsidiaryAgents.get(i).clone());
            ag.controller = this;
            clone.subsidiaryAgents.set(i, ag);
            }
        return clone;
        }
        
    /** Though this is public -- because interfaces (see Controller.java) must be public --
        do NOT call this method.  Instead, call setup(AgentGroup, String, Horde) */
    public void setup(ec.util.ParameterDatabase db, Horde horde)
        {
        // NOTE: we call super.setup() last, so we can get our subsidiary agents
        // set up first here
                
        // at this point horde has been set (in Agent.setup(...), so we can use it
                
        // Load groups with a single agent in them.  We can use that to prototype clone
        int numSubs = db.getInt(P_NUM_SUBS, null, 1);
        if (numSubs < 1) throw new RuntimeException("Invalid number of subsidiaries in Agent " + this.name);
        for(int i = 0; i < numSubs ; i++)
            subsidiaryAgents.add(new AgentGroup(this, db, P_SUB.push("" + i), horde));
        super.setup(db, horde);
        }               
        
    /** Called by Agent.setup(ParameterDatabase, Horde).  Note that this is in turn
        called by ControllerAgent.setup(ParameterDatabase, Horde), so subsidiaryAgents has been
        already set up. */
    public Behavior[] provideJointBehaviors(ec.util.ParameterDatabase db)
        {
        if (db.exists(P_NUM_JOINTS))  // is it heterogeneous?
            {
            System.err.println("Heterogeneous Controller Agent.  Loading Joint Behaviors: " + this.name);
            if (subsidiaryAgents.size() == 1)  // hmmmm
                System.err.println("WARNING.  Joint behaviors provided for homogeneous agents.  Hope you know what you're doing: " + this.name);
                                
            int numJoints = db.getInt(P_NUM_JOINTS, null, 0);
            if (numJoints < 1) throw new RuntimeException("Invalid number of joint behaviors in Agent " + this.name);
                        
            // Create joints
            Behavior[] joints = new Behavior[numJoints];
            for(int i = 0; i < numJoints ; i++)
                joints[i] = new JointBehavior(this, db, P_JOINT.push("" + i));
            return joints;
            }
        else if (subsidiaryAgents.size() == 1)  // is it homogeneous?
            {
            System.err.println("Homogeneous Controller Agent.  Creating Joint Behaviors: " + this.name);
            boolean all = db.getBoolean(P_ALLOW_ALL_BEHAVIORS, null, false);  // all behaviors or just macros?
            if (all) System.err.println("Allowing *all* joint behaviors.");
            Agent sub = (Agent)(subsidiaryAgents.get(0).agents.get(0));
                        
            // count the joints to load
            int count = 0;
            for(int i = 0; i < sub.behavior.behaviors.length; i++)
                {
                Behavior behavior = sub.behavior.behaviors[i];
                if (behavior instanceof TrainableMacro || all)
                    count++;
                }
            Behavior[] joints = new Behavior[count];
                        
            // load the joints
            int count2 = 0;
            for(int i = 0; i < sub.behavior.behaviors.length; i++)
                {
                Behavior behavior = sub.behavior.behaviors[i];
                if (behavior instanceof TrainableMacro || all)
                    joints[count2++] = new JointBehavior(this, behavior);
                }
            return joints;
            }
        else
            {
            throw new RuntimeException("Heterogeneous Controller Agent with no joint behaviors defined: " + this.name);
            }
        }

    public int maxLeafDistance()
        {
        if (maxLeafDistance != -1)
            return maxLeafDistance;
                        
        int dist = 1;

        for (AgentGroup group : subsidiaryAgents)
            if (group.getAgent(0) instanceof Controller)
                {
                Controller sub = (Controller) group.getAgent(0);
                int subDist = sub.maxLeafDistance();

                if (dist < subDist + 1)
                    dist = subDist + 1;
                }
                                
        maxLeafDistance = dist;
        return dist;
        }



//// BELOW THIS LINE WE MIGHT JUST DELETE EVERYTHING


/*

  public ControllerAgent(Horde horde)
  {
  super(horde);
  subsidiaryAgents = new ArrayList<AgentGroup>();
  addType("CONTROLLER");
  }

  public void distribute(Agent[][] basic, int[] agentIndex)
  {

  // Get the agent names associated with the first dimension of the agent pool
  String[] basicAgentNames = horde.basicAgentNames();

  for (int i = 0; i < subsidiaryAgents.size(); i++)
  {
  AgentGroup group = subsidiaryAgents.get(i);
  boolean basicGroup = false;

  for (int j = 0; j < basicAgentNames.length; j++)
  {
  // If the subsidiary agent group is a basic agent, populate it based
  // on the allocation determined when the agent hierarchy was generated
  if (group.getAgentType().equalsIgnoreCase(basicAgentNames[j]))
  {
  basicGroup = true;

  for (int k = 0; k < basicAgentAlloc[j]; k++)
  {

  if (agentIndex[j] >= basic[j].length)
  {
  throw new RuntimeException("Not enough agents in pool for allocation");
  }

  if (basic[j][agentIndex[j]].getGroup() != null)
  {
  throw new RuntimeException("The indexed basic agent has already been allocated");
  }

  group.addAgent(basic[j][agentIndex[j]]);
  agentIndex[j]++;
  }
  }
  }

  if (!basicGroup)
  {
  for (int k = 0; k < group.getSize(); k++)
  {
  Agent sub = group.getAgent(k);

  if (sub instanceof Controller)
  {
  Controller subCtl = (Controller) sub;
  subCtl.distribute(basic, agentIndex);
                                                
  // This also makes the subcontroller appear in the agents field
  ((SimControllerAgent) subCtl).driftToPose(
  ((SimControllerAgent) subCtl).meanAgentLoc(),
  horde.random.nextDouble() * Math.PI * 2 - Math.PI);
  }
  else
  {
  throw new RuntimeException("The sub-agent " + sub.getName() + 
  " is a basic agent, but the not identified in the basic agent pool");
  }
  }
  }
  }
  }

  public AgentGroup addAgentGroup(String agentType)
  {
  for (AgentGroup group : subsidiaryAgents)
  if (group.getAgentType().equals(agentType))
  {
  return group;
  }

  AgentGroup group = new AgentGroup(agentType);
  group.setController(this);
  subsidiaryAgents.add(group);

  return group;
  }

  public List<AgentGroup> getSubsidiaryAgents()
  {
  return subsidiaryAgents;
  }

  public int numControllers()
  {
  int count = 1; // I am a controller
  for (AgentGroup group : subsidiaryAgents)
  count += group.numControllers();

  return count;
  }

  public int totalAgents()
  {
  int count = 1;
  for (AgentGroup group : subsidiaryAgents)
  count += group.totalAgents();

  return count;
  }

  public List<Agent> getSubsidiaryAgents(String agentName)
  {
  for (AgentGroup group : subsidiaryAgents)
  if (group.getAgentType().equals(agentName))
  {
  return group.getAgents();
  }

  return null;
  }

  public GroupBehavior[] groupBehaviors()
  {
  List<GroupBehavior> macros = new ArrayList<GroupBehavior>();

  for (AgentGroup group : subsidiaryAgents)
  if (group.getSize() > 0)
  {
  GroupBehavior[] sub = GroupBehavior.provideAllGroupBehaviors(group.getAgent(0));

  for (int i = 0; i < sub.length; i++)
  macros.add(sub[i]);
  }

  GroupBehavior [] gb = new GroupBehavior[macros.size()];
  System.arraycopy(macros.toArray(), 0, gb, 0, macros.size());

  return gb;
  }

  public boolean hasManipulated()
  {
  for (AgentGroup group : subsidiaryAgents)
  if (group.agentManipulated()) return true;

  return false;
  }

*/
    }
