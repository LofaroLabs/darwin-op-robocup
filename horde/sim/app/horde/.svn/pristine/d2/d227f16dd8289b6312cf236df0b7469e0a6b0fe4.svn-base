package sim.app.horde.agent;

import java.util.*;
import ec.util.*;
import java.io.*;
import sim.app.horde.*;
import sim.app.horde.behaviors.*;

/** 
    An AgentGroup has a collection of Subsidiary agents.
*/

public class AgentGroup
    {
    static final long serialVersionUID = 1L;

    /** Parameter for the maximum number of agents permitted in the agent group */
    public static final String P_MAX = "max";  // yes, I know this isn't a Parameter, it's a string
    /** Parameter for the minimum number of agents permitted in the agent group */
    public static final String P_MIN = "min";  // yes, I know this isn't a Parameter, it's a string
    /** Parameter for the preferred number of agents permitted in the agent group */
    public static final String P_PREFERRED = "pref";  // yes, I know this isn't a Parameter, it's a string

    /** The AgentGroup's subsidiary agents.  */
    ArrayList<Agent> agents = new ArrayList<Agent>();

    /** The AgentGroup's controller */
    Controller controller;

    /** The minimum number of agents permitted in the agent group */
    int minAgents;

    /** The maximum number of agents permitted in the agent group */
    int maxAgents;

    /** The preferred number of agents permitted in the agent group */
    int preferredAgents;
    
    int computedMinAgents;
    int computedMaxAgents;
    int computedPreferredAgents;

    /** Builds a dummy AgentGroup with no controller and no parameters set.
        Used for top-level AgentGroups in Horde.java such as roots and coroots. */
    public AgentGroup()
        {
        }
                
    /** Builds an AgentGroup given a controller and a database.
        Initially the AgentGroup will contain a single agent, which will be used
        as a prototype to flesh out the AgentGroup with more agents. */
    public AgentGroup(Controller controller, ec.util.ParameterDatabase db, Parameter base, Horde horde)
        {
        this.controller = controller;
        
        // Initially an AgentGroup contains a single prototypical agent at position 0
        String name = db.getString(base, null);
        
        minAgents = db.getInt(base.push(P_MAX), null, 1);
        if (minAgents < 1) throw new RuntimeException("Min agents must be >= 1");
        
        maxAgents = db.getInt(base.push(P_MAX), null, minAgents);
        if (maxAgents < minAgents) throw new RuntimeException("Max agents must be >= min agents");

        preferredAgents = db.getInt(base.push(P_PREFERRED), null, 1);
        if (preferredAgents < minAgents || preferredAgents > maxAgents) 
            throw new RuntimeException("Preferred agents must be between min and max agents inclusive");
        
        Agent proto = Agent.provideAgent(Agent.getDatabase(name), this, name, horde);
        agents.add(proto);
        }
                
    public Object clone()
        {
        try
            {
            AgentGroup clone = (AgentGroup)(super.clone());
            // just clone the agents, not the controller.  It'll get set by my Controller when it clones
            clone.agents = new ArrayList(agents);
                
            // deep clone the agents
            for(int i = 0; i < clone.agents.size(); i++)
                {
                Agent a = (Agent)(clone.agents.get(i).clone());
                a.group = this;
                clone.agents.set(i, a);
                }
            return clone;
            }
        catch (CloneNotSupportedException e) { return null; } // never happens
        }
    
    /** 
        Informs subsidiary agents to perform a certain behavior (the index) corresponding
        to the provided joint behavior.
        
        <p><b>
        NOTE THAT CONTROLLERS OUGHT TO BE SCHEDULED BEFORE THEIR SUBSIDIARIES
        IN ORDER TO MAXIMIZE SPEED, ELSE IT MAY TAKE SEVERAL TICKS TO DISTRIBUTE
        COMMANDS!  -- Sean
        
        <p>See Horde.createAgents() comments
        </b>
    */
    public void fireBehaviors(JointBehavior joint, int behaviorIndex)
        {
                
        for(int i = 0; i < agents.size(); i++)
            agents.get(i).behavior.setNewBehaviorRequestedByUser(behaviorIndex, joint.getTargets());
        }
    
    /** Returns the given agent. */
    public Agent getAgent(int index)
        {
        return agents.get(index);
        }

    /** Returns all agents. */
    public ArrayList<Agent> getAgents()
        {
        return agents;
        }

    /** Returns the group's name, which is defined as the name of its first agent. */
    public String getName()
        {
        return agents.get(0).getName();
        }

    /** Returns the group's controller. */
    public Controller getController()
        {
        return controller;
        }

    /** Adds an agent to the group. */
    public void addAgent(Agent agent)
        {
        agents.add(agent);
        agent.setGroup(this);
        }
    }
