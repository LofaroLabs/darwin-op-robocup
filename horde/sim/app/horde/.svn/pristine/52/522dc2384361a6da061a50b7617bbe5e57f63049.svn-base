package sim.app.horde;

import java.awt.*;
import java.awt.geom.*;
import java.io.*;
import java.lang.reflect.*;
import java.util.*;

import sim.app.horde.agent.*;
import sim.app.horde.behaviors.*;
import sim.app.horde.objects.*;
import sim.field.continuous.*;
import sim.field.grid.*;
import sim.util.*;

public class SimHorde extends Horde
    {
    private static final long serialVersionUID = 1;

    public static String arena = "arenas/default.arena.txt";

    // width and height of the environment
    public int width = 100;
    public int height = 100;

    // No obstacles should be larger than this size
    public static final double MAX_OBSTACLE_DIAMETER = 25;

    public static final boolean ALLOW_COLLISIONS_WITH_AGENTS = false;

    // objects come in two size categories: SMALL/MEDIUM and ARBITRARILY LARGE
    // SMALL/MEDIUM object may be detected within a certain range, depending on
    // the object.
    public double SMALL_CLOSE_RANGE = 1.0;
    public double SMALL_MEDIUM_RANGE = 5.0;
    public double SMALL_FAR_RANGE = 10.0;
    public double SMALL_FULL_RANGE = Math.max(width, height);

    // ARBITRARILY LARGE are meant to be relatively sparse, and so they are
    // globally detectable
    public double LARGE_FULL_RANGE = Math.max(width, height);

    // fields
    public IntGrid2D ground = new IntGrid2D(width + 1, height + 1);
    public DoubleGrid2D food = new DoubleGrid2D(width + 1, height + 1);
    public Continuous2D agents = new Continuous2D(SMALL_MEDIUM_RANGE * 1.5, width, height);
    public Continuous2D obstacles = new Continuous2D(LARGE_FULL_RANGE * 1.5, width, height);
    public Continuous2D regions = new Continuous2D(LARGE_FULL_RANGE * 1.5, width, height);
    public Continuous2D markers = new Continuous2D(SMALL_MEDIUM_RANGE * 1.5, width, height);
    public Set<Marker> markerTable = new HashSet<Marker>();

    /**
     * Converts a floating-point coordinate into a grid cell for the ground or
     * floor
     */
    public int gridX(double x)
        {
        return (int) (x + 0.5);
        } // we presume that x is positive, else the proper equation is Math.floor(x+0.5);

    /**
     * Converts a floating-point coordinate into a grid cell for the ground or
     * floor
     */
    public int gridY(double y)
        {
        return (int) (y + 0.5);
        } // we presume that y is positive, else the proper equation is Math.floor(y+0.5);

    // mouse location in the horde world
    public Double2D mouseLoc;

    public SimHorde(long seed)
        {
        super(seed);
        }

    Targetable defaultTargetable = new Targetable()
        {
        public Double2D getTargetLocation(Agent agent, Horde horde)
            {
            return mouseLoc;
            }

        public int getTargetStatus(Agent agent, Horde horde)
            {
            return 0;
            }

        public int getTargetRank(Agent agent, Horde horde)
            {
            return -1;
            }

        public boolean getTargetIntersects(Agent agent, Horde horde, Double2D location, double slopSquared)
            {
            return getTargetLocation(agent, horde).distanceSq(location) <= slopSquared;
            }

        public void setParameterValue(int index) {}
        public void setTargetLocation(Agent agent, Horde horde, Double2D location) {}
        public void setTargetStatus(Agent agent, Horde horde, int status) {}
        public void setTargetRank(Agent agent, Horde horde, int rank) {}
        };

    public static final Color[] parameterObjectColor = new Color[] { Color.red, Color.blue, Color.green };

    public static final String[] parameterObjectColorName = new String[] { "red", "blue", "green" };

    Targetable[] parameterObject = new Targetable[] { defaultTargetable, defaultTargetable, defaultTargetable };

    public Targetable getParameterObject(int i)
        {
        return parameterObject[i];
        }

    public void setParameterObject(int i, Targetable obj)
        {
        // find the targetable if it's already a parameter
        int foundObj = -1;
        for (int j = 0; j < parameterObject.length; j++)
            if (parameterObject[j] == obj)
                {
                foundObj = j;
                break;
                }

        // CASE 1:
        // obj is not a parameter. Make it a parameter and
        // replace the old one
        if (foundObj == -1)
            {
            parameterObject[i].setParameterValue(-1);
            obj.setParameterValue(i);
            parameterObject[i] = obj;
            }
        // CASE 2:
        // obj is a parameter already. Swap with the existing parameter
        else
            {
            Targetable old = parameterObject[i];
            old.setParameterValue(foundObj);
            obj.setParameterValue(i);
            parameterObject[i] = obj;
            parameterObject[foundObj] = old;
            }
        }


    public Marker getMarker(String name)
        {
        Iterator<Marker> im = markerTable.iterator();
                
        while (im.hasNext())
            {
            Marker m = im.next();
            if (m.toString().equals(name))
                return m;
            }
                
        return null;
        }
        
    void loadArena(String resource)
        {
        Scanner scan = null;
        HashMap<String,ec.util.ParameterDatabase> databases = new HashMap<String,ec.util.ParameterDatabase>();
        
        // clear out agent lists
        
        basics = new ArrayList<Agent>();
        roots = new ArrayList<Agent>();
        cobasics = new ArrayList<Agent>();
        coroots = new ArrayList<Agent>();
        
        try
            {
            scan = new Scanner(new InputStreamReader(SimHorde.class.getResourceAsStream(resource), "UTF-8"));
            }
        catch (UnsupportedEncodingException e)
            {
            System.err.println("For some reason, UTF-8 isn't supported.");
            e.printStackTrace();
            return;
            }
        while (scan.hasNext())
            {
            String tok = scan.next().trim();
            if (tok.startsWith("#")) // comment
                {
                scan.nextLine();
                continue;
                }
            // size is: size width height
            else if (tok.equals("size"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                int w = vscan.nextInt();
                int h = vscan.nextInt();
                agents.width = regions.width = markers.width = obstacles.width = width = w;
                agents.height = regions.height = markers.height = obstacles.height = height = h;
                }
            // Food grid is: food filename
            else if (tok.equals("food"))
                {
                String val = scan.nextLine().trim();
                InputStream str = SimHorde.class.getResourceAsStream(val);
                double[][] res = null;
                try
                    {
                    if (val.endsWith(".pgm") || val.endsWith(".pbm") || val.endsWith(".PGM")
                        || val.endsWith(".PBM"))
                        ; // food.setTo(TableLoader.convertToDoubleArray(TableLoader.loadPNMFile(str,
                    // true)));
                    /*
                     * ^ | --- the above line has problem, need to fix. I
                     * commented out to test the pruning code -khaled
                     */
                    else
                        food.setTo(TableLoader.loadTextFile(str, true));
                    } catch (Exception e)
                    {
                    System.err.println("Could not load file defining the food grid");
                    e.printStackTrace();
                    }
                }
            // Ground is: ground filename
            else if (tok.equals("ground"))
                {
                String val = scan.nextLine().trim();
                InputStream str = SimHorde.class.getResourceAsStream(val);
                double[][] res = null;
                try
                    {
                    if (val.endsWith(".pgm") || val.endsWith(".pbm") || val.endsWith(".PGM")
                        || val.endsWith(".PBM"))
                        ground.setTo(TableLoader.loadPNMFile(str, true));
                    else if (val.endsWith(".png") || val.endsWith(".gif"))
                        ; // ground.setTo(TableLoader.loadPNGFile(str)); //<--
                    // this line has problem, need to fix. -khaled
                    else
                        ground.setTo(TableLoader.convertToIntArray(TableLoader.loadTextFile(str,
                                    true)));
                    } catch (Exception e)
                    {
                    System.err.println("Could not load file defining the ground grid");
                    e.printStackTrace();
                    }
                }
            // Markers are: marker x y targetableIndex name
            // if targetableIndex < 0, it's not initially targetable
            else if (tok.equals("marker"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                Double2D loc = new Double2D(vscan.nextDouble(), vscan.nextDouble());
                int index = vscan.nextInt();
                String name = vscan.nextLine().trim();  // the rest of the line is the name

                Marker marker = new Marker(name);
                markerTable.add(marker);
                markers.setObjectLocation(marker, loc);
                if (index >= 0) setParameterObject(index, marker);
                }
            // Circles are: circle x y targetableIndex diameter field
            // fields are: 0=obstacles 1=regions
            // if targetableIndex < 0, it's not initially targetable
            else if (tok.equals("circle"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                Double2D loc = new Double2D(vscan.nextDouble(), vscan.nextDouble());
                int index = vscan.nextInt();
                double diameter = vscan.nextDouble();
                int f = vscan.nextInt();
                Continuous2D field = (f == 0 ? obstacles : regions);

                CircularBody body = new CircularBody(diameter, field, loc);
                field.setObjectLocation(body, loc);
                if (index >= 0) setParameterObject(index, body);
                }
            // Rects are: rect x y targetableIndex width height field
            // fields are: 0=obstacles 1=regions
            // if targetableIndex < 0, it's not initially targetable
            else if (tok.equals("rect"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                Double2D loc = new Double2D(vscan.nextDouble(), vscan.nextDouble());
                int index = vscan.nextInt();
                double width = vscan.nextDouble();
                double height = vscan.nextDouble();
                int f = vscan.nextInt();
                Continuous2D field = (f == 0 ? obstacles : regions);

                RectangularBody body = new RectangularBody(width, height, field, loc);
                field.setObjectLocation(body, loc);
                if (index >= 0) setParameterObject(index, body);
                }
            // SquareCircles are: squarecircle x y targetableIndex field
            // fields are: 0=obstacles 1=regions
            // if targetableIndex < 0, it's not initially targetable
            // This is just a hack to get the square-circle shape loadable for
            // now
            else if (tok.equals("squarecircle"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                Double2D loc = new Double2D(vscan.nextDouble(), vscan.nextDouble());
                int index = vscan.nextInt();
                int f = vscan.nextInt();
                Continuous2D field = (f == 0 ? obstacles : regions);

                Area r = new Area(new Rectangle2D.Double(0, 0, 10, 10));
                Area r2 = new Area(new Ellipse2D.Double(5, 5, 15, 15));
                r.add(r2);

                Body body = new Body(r, field, loc);
                field.setObjectLocation(body, loc);
                if (index >= 0) setParameterObject(index, body);
                }
            // Text is: text x y targetableIndex field fontsize string
            // fields are: 0=obstacles 1=regions
            // The string can have whitespace inside
            // if targetableIndex < 0, it's not initially targetable
            else if (tok.equals("text"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                Double2D loc = new Double2D(vscan.nextDouble(), vscan.nextDouble());
                int index = vscan.nextInt();
                int f = vscan.nextInt();
                Continuous2D field = (f == 0 ? obstacles : regions);
                int fontSize = vscan.nextInt();
                String string = vscan.nextLine().trim();

                Body body = new Body(string, fontSize, field, loc);
                field.setObjectLocation(body, loc);
                if (index >= 0) setParameterObject(index, body);
                }
            // coagent is: cobasic name x y orientation
            // or:  cobasic name num x y width height
            else if (tok.equals("cobasic"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                String agentName = vscan.next();

                // get database
                ec.util.ParameterDatabase db = null;
                if (databases.containsKey(agentName))
                    db = databases.get(agentName);
                else
                    {
                    db = Agent.getDatabase(agentName);
                    databases.put(agentName, db);
                    }

                double x = vscan.nextDouble();
                double y = vscan.nextDouble();
                double o = vscan.nextDouble();
                // are there any more?
                if (vscan.hasNextDouble())
                    {
                    // cobasic name number x y width height
                    double num = x;
                    x = y;
                    y = o;
                    double w = vscan.nextDouble();
                    double h = vscan.nextDouble();
                        
                    for(int i = 0; i < num; i++)
                        {
                        SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                        agent.setLocation(new Double2D(random.nextDouble() * w + x, random.nextDouble() * h + y));
                        agent.setOrientation(random.nextDouble() * Math.PI * 2);
                        cobasics.add(agent);
                        }
                    }
                else
                    {
                    // cobasic name x y orientation
                    SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                    agent.setLocation(new Double2D(x,y));
                    agent.setOrientation(o);
                    cobasics.add(agent);
                    }
                }
            // Agent is: basic name x y orientation
            // Or: basic name number x y width height
            else if (tok.equals("basic"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                String agentName = vscan.next();
                
                // get database
                ec.util.ParameterDatabase db = null;
                if (databases.containsKey(agentName))
                    db = databases.get(agentName);
                else
                    {
                    db = Agent.getDatabase(agentName);
                    databases.put(agentName, db);
                    }

                double x = vscan.nextDouble();
                double y = vscan.nextDouble();
                double o = vscan.nextDouble();
                if (vscan.hasNextDouble())
                    {
                    // basic name number x y width height
                    double num = x;
                    x = y;
                    y = o;
                    double w = vscan.nextDouble();
                    double h = vscan.nextDouble();
                        
                    for(int i = 0; i < num; i++)
                        {
                        SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                        agent.setLocation(new Double2D(random.nextDouble() * w + x, random.nextDouble() * h * y));
                        agent.setOrientation(random.nextDouble() * Math.PI * 2);
                        basics.add(agent);
                        }
                    }
                else
                    {
                    // basic name x y orientation
                    SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                    agent.setLocation(new Double2D(x,y));
                    agent.setOrientation(o);
                    basics.add(agent);
                    }
                }
            // Root is: root name       [for controller agents]
            // Or: root name number [for controller agents]
            // Or: root name x y orientation
            // Or: root name number x y width height
            else if (tok.equals("root"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                String agentName = vscan.next();
                
                // get database
                ec.util.ParameterDatabase db = null;
                if (databases.containsKey(agentName))
                    db = databases.get(agentName);
                else
                    {
                    db = Agent.getDatabase(agentName);
                    databases.put(agentName, db);
                    }

                if (vscan.hasNextDouble())      
                    {
                    double x = vscan.nextDouble();
                    if (vscan.hasNextDouble())
                        {
                        double y = vscan.nextDouble();
                        double o = vscan.nextDouble();
                        if (vscan.hasNextDouble())
                            {
                            // root name number x y width height
                            double num = x;
                            x = y;
                            y = o;
                            double w = vscan.nextDouble();
                            double h = vscan.nextDouble();
                                        
                            for(int i = 0; i < num; i++)
                                {
                                SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                                agent.setLocation(new Double2D(random.nextDouble() * w + x, random.nextDouble() * h + y));
                                agent.setOrientation(random.nextDouble() * Math.PI * 2);
                                roots.add(agent);
                                }
                            }
                        else
                            {
                            // root name x y orientation
                            SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                            agent.setLocation(new Double2D(x,y));
                            agent.setOrientation(o);
                            roots.add(agent);
                            }
                        }
                    else
                        {
                        // root name number
                        double num = vscan.nextDouble();
                        for(int i = 0; i < num; i++)
                            {
                            SimControllerAgent agent = (SimControllerAgent)(Agent.provideAgent(db, null, agentName, this));
                            roots.add(agent);
                            }
                        }
                    }
                else
                    {
                    // root name 
                    SimControllerAgent agent = (SimControllerAgent)(Agent.provideAgent(db, null, agentName, this));
                    roots.add(agent);
                    }
                }
            // Coroot is: coroot name behavior  [for controller agents]
            // Or: coroot name behavior number [for controller agents]
            // Or: coroot name behavior x y orientation
            // Or: coroot name behavior number x y width height
            else if (tok.equals("coroot"))
                {
                String val = scan.nextLine().trim();
                Scanner vscan = new Scanner(val);
                String agentName = vscan.next();
                
                // get database
                ec.util.ParameterDatabase db = null;
                if (databases.containsKey(agentName))
                    db = databases.get(agentName);
                else
                    {
                    db = Agent.getDatabase(agentName);
                    databases.put(agentName, db);
                    }

                String agentBehavior = vscan.next();

                if (vscan.hasNextDouble())      
                    {
                    double x = vscan.nextDouble();
                    if (vscan.hasNextDouble())
                        {
                        double y = vscan.nextDouble();
                        double o = vscan.nextDouble();
                        if (vscan.hasNextDouble())
                            {
                            // root name behavior number x y width height
                            double num = x;
                            x = y;
                            y = o;
                            double w = vscan.nextDouble();
                            double h = vscan.nextDouble();
                                        
                            for(int i = 0; i < num; i++)
                                {
                                SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                                agent.getBehavior().userChangedBehavior(this, agent.indexOfBehavior(agentBehavior));
                                agent.setLocation(new Double2D(random.nextDouble() * w + x, random.nextDouble() * h + y));
                                agent.setOrientation(random.nextDouble() * Math.PI * 2);
                                coroots.add(agent);
                                // don't think we should also say agents.add(agent)
                                }
                            }
                        else
                            {
                            // root name behavior x y orientation
                            SimAgent agent = (SimAgent)(Agent.provideAgent(db, null, agentName, this));
                            agent.getBehavior().userChangedBehavior(this, agent.indexOfBehavior(agentBehavior));
                            agent.setLocation(new Double2D(x,y));
                            agent.setOrientation(o);
                            roots.add(agent);
                            // don't think we should also say agents.add(agent)
                            }
                        }
                    else
                        {
                        // root name behavior number
                        double num = vscan.nextDouble();
                        for(int i = 0; i < num; i++)
                            {
                            SimControllerAgent agent = (SimControllerAgent)(Agent.provideAgent(db, null, agentName, this));
                            agent.getBehavior().userChangedBehavior(this, agent.indexOfBehavior(agentBehavior));
                            roots.add(agent);
                            }
                        }
                    }
                else
                    {
                    // root name behavior
                    SimControllerAgent agent = (SimControllerAgent)(Agent.provideAgent(db, null, agentName, this));
                    agent.getBehavior().userChangedBehavior(this, agent.indexOfBehavior(agentBehavior));
                    roots.add(agent);
                    }
                }
            // This must be a custom class with it's own initFromParamString method
            else
                {
                try
                    {
                    int numObjs = Integer.valueOf(tok);
                    String className = scan.next().trim();
                    String params = scan.nextLine().trim();
                                        
                    Class theClass = Class.forName(className);
                    Constructor constructor = theClass.getConstructor(new Class[]
                        { Horde.class });
                                        
                    for (int i = 0; i < numObjs; i++)
                        {
                        Initable theObj = (Initable) constructor.newInstance(this);
                        theObj.initFromParamString(params);
                        }
                    } 
                catch (Exception e)
                    {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                    }
                }
            }
        scan.close();
        }
        
    public void start()
        {
        // set up the agents field
        agents = new Continuous2D(SMALL_MEDIUM_RANGE * 1.5, width, height);
        obstacles = new Continuous2D(LARGE_FULL_RANGE * 1.5, width, height);
        regions = new Continuous2D(LARGE_FULL_RANGE * 1.5, width, height);
        markers = new Continuous2D(SMALL_MEDIUM_RANGE * 1.5, width, height);

        if (arena != null) loadArena(arena);

        super.start();
        }

    public static void main(String[] args)
        {
        doLoop(SimHorde.class, args);
        System.exit(0);
        }

    // available ranks
    int nextRank = 0;

    public int assignRank()
        {
        return nextRank++;
        }
    }
