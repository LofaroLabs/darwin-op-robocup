package sim.app.horde;

import sim.engine.*;
import sim.display.*;
import javax.swing.*;
import java.awt.*;
import sim.portrayal.*;
import java.awt.event.*;
import sim.app.horde.agent.Agent;
import java.util.*;

import sim.app.horde.behaviors.*;
import sim.app.horde.features.*;
import sim.app.horde.targets.*;


public abstract class HordeWithUI extends GUIState implements MacroObserver
    {
    private static final long serialVersionUID = 1;

    private HordeWithUI() { super(null); }  // this should never be called.  Instead call super(new Horde(System.currentTimeMillis())) or use SimHorde
    
    public HordeWithUI(SimState state) { super(state); }

    public Object getSimulationInspectedObject()
        {
        return state;
        }  // non-volatile
                
    public static String getName()
        {
        return "The Horde";
        }

	public void resetting()
		{
        buildAddList();  // redo the features window
        buttons.setBehaviors(((Horde) state).getTrainingMacro());  // redo the action button array
		}

    public void start()
        {
        // we want the observer to be set by the time super.start is called
        // so that when the training agent is set for the first time, the
        // observer is properly called to inform it of this.
        ((Horde) state).observer = this;

        // NOW call super.start
        super.start();
        }

    public Inspector getInspector() 
        { 
        Inspector i = super.getInspector(); 
        i.setVolatile(true);
        return i;
        }
        
    public ButtonArray buttons;
    public AddList addlist;

    public void init(final sim.display.Controller c)
        {
        super.init(c);
                
        // make the addlist
        addlist = new AddList();

        ((Console)c).getTabPane().addTab("Features", addlist);
        ((Console)c).getTabPane().removeTabAt(0);  // About
        ((Console)c).getTabPane().removeTabAt(1);  // Console, after About has been removed
        ((Console)c).getTabPane().addTab("Actions", buttons = new ButtonArray(this));
        }

    /***** Code for setting up the Behavior List ******/

    public JPopupMenu createTargetMenu(final TrainableMacro macro, final Targeting targeting)
        {
        final Target[] arguments = targeting.getTargets();                      // ground targets or wrappers from the behavior
        final String[] argumentNames = targeting.getTargetNames();
        final Target[] targets = Target.provideAllTargets(macro);                   // targets they are allowed to be (in wrapper form or ground)
        // return null if no arguments used
        boolean empty = true;
        for(int i = 0; i < arguments.length; i++) 
            if (arguments[i] != null) 
                {
                empty = false; 
                break; 
                }
        if (empty) return null;
        
        // build a menu
        JPopupMenu targetMenu = new JPopupMenu();
        for(int i = 0; i < arguments.length; i++)
            if (arguments[i] != null)
                {
                JMenu menu = new JMenu(argumentNames[i]);
                ButtonGroup group = new ButtonGroup();
                for(int j = 0; j < targets.length; j++)
                    {
                    final JRadioButtonMenuItem jmi = new JRadioButtonMenuItem("Assign to " + targets[j]);
                    group.add(jmi);
                                        
                    // we need to identify which target is currently being used.
                    if (arguments[i] instanceof Wrapper && targets[j] instanceof Parameter )
                        {
                        if (((Wrapper)(arguments[i])).isTargeting(macro, (Parameter)(targets[j])))
                            jmi.setSelected(true);
                        }
                    else    // next check if it's a base class.  Let's compare classes
                        {
                        if (arguments[i].getClass() == targets[j].getClass())  // it's the one!!!
                            jmi.setSelected(true);
                        }
                                        
                    final int _i = i;
                    final int _j = j;
                    // now add the action listener
                    jmi.addActionListener(new ActionListener()
                        {
                        public void actionPerformed(ActionEvent e)
                            {
                            synchronized(state.schedule)
                                {
                                jmi.setSelected(true);
                                if (targets[_j] instanceof Parameter)
                                    {
                                    Wrapper w = new Wrapper(targeting.getTargetName(_i), ((Parameter)targets[_j]).getIndex());
                                    targeting.setTarget(_i, w);  // make a wrapper for the Parameter
                                    }
                                else
                                    {
                                    targeting.setTarget(_i, targets[_j]);  // it's just a ground target, don't make a wrapper for it
                                    }
                                }
                            }
                        });
                                        
                    menu.add(jmi);
                    }
                targetMenu.add(menu);
                }
        return targetMenu;
        }



    public AddListCallback buildAddListElement(final Feature _feature)
        {
        return new AddListCallback()
            {
            HashMap features = new HashMap();  // a hashmap so we can have more than one feature in the top list
            Point loc = null;
                                
            public void setComponentLocation(Point loc) { this.loc = loc; }
            public String toString() { return "" + _feature.getName(); }
            public void unincludeElement(JComponent element)
                {
                Horde horde = (Horde)state;
                Feature feature = (Feature)(features.get(element));
                if (feature!=null) horde.removeCurrentFeature(feature);
                else throw new RuntimeException("Unknown feature removed.  This shouldn't happen");
                }
            public JComponent copyElement(boolean user)
                {
                Horde horde = (Horde)state;
                Feature feature = (Feature)(_feature.clone());
                final JButton b = new JButton(feature.getName());
                final JPopupMenu menu = createTargetMenu(horde.getTrainingMacro(), feature);
                b.addActionListener(new ActionListener() 
                    { public void actionPerformed(ActionEvent e) { if (menu!= null) menu.show(addlist, loc.x + b.getWidth(), loc.y); } });
                horde.addCurrentFeature(feature, user);
                features.put(b, feature);
                return b;
                }
            };
        }


    
    public void buildAddList()
        {
        Horde horde = (Horde)state;
        
        addlist.clear(); 

        Agent trainingAgent = horde.getTrainingAgent();
        
        // add the addable features
        Feature[] f = Feature.provideAllFeatures(trainingAgent);
        for(int i = 0; i < f.length; i++)
            addlist.addElement(buildAddListElement(f[i]));

		// add the existing features
        f = trainingAgent.getBehavior().features;
        for(int i = 0; i < f.length; i++)
            addlist.includeElement(buildAddListElement(f[i]), false);
        }




    /** Called when the agent's macro has decided to transition from FROM to TO.
        We then update the current hilighted behavior button as a result. 
        A method defined by MacroObserver. */
    public void transitioned(Macro macro, final int from, final int to)
        {
        Horde horde = (Horde) (state);

        if (macro == horde.getTrainingMacro()) // it's the relevant one, don't listen to the others
            {
            if (from != to)
                {
                SwingUtilities.invokeLater(new Runnable()
                    {
                    public void run() { synchronized(state.schedule) { buttons.hilightCurrentBehavior(to); } }
                    });
                }
            }
        }

    /** Called when the training agent has been changed.  A method defined by MacroObserver. */
    public void trainingAgentChanged()
        {
        buildAddList();  // redo the features window
        buttons.setBehaviors(((Horde)state).getTrainingMacro());  // redo the action button array
        }

    }
